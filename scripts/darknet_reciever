#!/usr/bin/env python
# -*- coding:utf-8 -*-
import rospy
from darknet_ros_msgs.msg import BoundingBox, BoundingBoxes
from sensor_msgs.msg import Image
import math
import io
import time
# from PIL import Image as P_Image
# from PIL import ImageDraw, ImageFont
import cv2
from cv_bridge import CvBridge, CvBridgeError
# import PIL

class DarknetReciever:
  def __init__(self):
    self.pub_rate = rospy.get_param('~pub_rate', 15)
    self.image_buf = None
    self.bboxes = None
    self.bboxes_time_buf = None

    self.time_th = 0.4

    self.img_topic_name = rospy.get_param('~input_img', 'input_img')

    self.image_pub = rospy.Publisher(rospy.get_param('~output_img', 'output_img'), Image, queue_size=1)
    self.bridge = CvBridge()
   
    rospy.Subscriber(rospy.get_param('~input_img', 'input_img'), Image, self.callback_image, queue_size=1)
    rospy.Subscriber(rospy.get_param('~bboxes', 'bboxes'), BoundingBoxes, self.callback_bboxes, queue_size=1)
    
  def callback_image(self, data):
    self.image_buf = self.bridge.imgmsg_to_cv2(data, "bgr8")

    # self.image_buf = P_Image.frombytes('bgr8',(640, 320), io.BytesIO(bytearray(data.data)))
  
  def callback_bboxes(self, data):
    self.bboxes_time_buf = time.time()
    self.bboxes = data.bounding_boxes

  def show_detected_image(self):
    if not(self.bboxes_time_buf is None):
      bboxes_dt = time.time() - self.bboxes_time_buf 
      if not(self.bboxes is None) and bboxes_dt < self.time_th:
        for i, bbox in enumerate(self.bboxes):
          cv2.rectangle(self.image_buf, (bbox.xmin, bbox.ymin), (bbox.xmax, bbox.ymax), (0,255,0), 4, cv2.LINE_AA)
          cv2.putText(self.image_buf, bbox.Class, (bbox.xmin, bbox.ymin), cv2.FONT_HERSHEY_SIMPLEX, 3, (0,0,255), 5)

    cv2.imshow("Detected Image", self.image_buf)
    cv2.waitKey(1)

if __name__ == '__main__':
  rospy.init_node('DarknetReciever', anonymous=True)
  node = DarknetReciever()
  r = rospy.Rate(node.pub_rate)
  try:
     while not rospy.is_shutdown():
      try:
        node.show_detected_image()
      except:
        pass
      r.sleep()
  except rospy.ROSInterruptException:
    cv2.destroyAllWindows()
    rospy.loginfo("DarknetReciever node finished.")
