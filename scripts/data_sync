#!/usr/bin/env python
# -*- coding:utf-8 -*-
import rospy
import math 
import tf

import numpy as np

from math import cos, sin, sqrt, pi

from nav_msgs.msg import Odometry
from std_msgs.msg import String
from std_msgs.msg import Float64
from std_msgs.msg import Empty
from people_msgs.msg import People
from geometry_msgs.msg import Twist
import message_filters

class DataSynchronizer:
  def __init__(self):

    self.clk_pub = rospy.Publisher(rospy.get_param('~clk_topic_name', 'clk'), Empty, queue_size=10)
    odom_sub_filter = message_filters.Subscriber(rospy.get_param('~odom_topic_name', '/guidebot/odometry/filtered'), Odometry)
    cmd_sub_filter = message_filters.Subscriber(rospy.get_param('~cmd_topic_name', '/guidebot/cmd_vel'), Twist)
    people_sub_filter = message_filters.Subscriber(rospy.get_param('~peopel_topic_name', 'people'), People)
    clk_sub_filter = message_filters.Subscriber(rospy.get_param('~clk_topic_name', 'clk'), Empty)
    self.clk_rate = rospy.get_param('~clk_rate', 1)

    ts = message_filters.ApproximateTimeSynchronizer([odom_sub_filter, cmd_sub_filter, people_sub_filter,  clk_sub_filter], 100, 1.0, allow_headerless=True)
    ts.registerCallback(self.callback_sync)
  
  def callback_sync(self, data_1, data_2, data3, data4):
    print("Not implemented")

  def clk_publisher(self):
    r = rospy.Rate(self.clk_rate)
    while not rospy.is_shutdown():
      msg = Empty()
      self.clk_pub.publish(msg)

if __name__ == '__main__':
  rospy.init_node('data_syncronizer', anonymous=True)
  try:
    node = DataSynchronizer()
    node.clk_publisher()
    rospy.spin()
  except rospy.ROSInterruptException:
    rospy.loginfo("data_syncronizer node finished.")