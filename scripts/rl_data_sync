#!/usr/bin/env python
# -*- coding:utf-8 -*-
import rospy
import math 
import tf

import numpy as np

from math import cos, sin, sqrt, pi

from nav_msgs.msg import Odometry
from std_msgs.msg import String
from std_msgs.msg import Float64
from std_msgs.msg import Empty
from people_msgs.msg import People
from geometry_msgs.msg import Twist
from actionlib_msgs.msg import GoalStatusArray
from geometry_msgs.msg import PoseStamped
from rl_msgs.msg import Observation, Action, IsTerminal
import message_filters

class DataSynchronizer:
  def __init__(self):

    self.clk_pub = rospy.Publisher(rospy.get_param('~clk_topic_name', 'clk'), Empty, queue_size=10)
    odom_sub_filter = message_filters.Subscriber(rospy.get_param('~odom_topic_name', 'odom'), Odometry)
    cmd_sub_filter = message_filters.Subscriber(rospy.get_param('~cmd_topic_name', 'cmd_vel'), Twist)
    people_sub_filter = message_filters.Subscriber(rospy.get_param('~peopel_topic_name', 'people'), People)
    status_sub_filter = message_filters.Subscriber(rospy.get_param('~status_topic_name', 'status'), GoalStatusArray)
    clk_sub_filter = message_filters.Subscriber(rospy.get_param('~clk_topic_name', 'clk'), Empty)
    self.clk_rate = rospy.get_param('~clk_rate', 1)

    rospy.Subscriber(rospy.get_param('~goal_topic_name', 'goal'), PoseStamped, self.callback_goal)

    self.odom_pub = rospy.Publisher("/sync" + rospy.get_param('~odom_topic_name', 'odom'), Odometry, queue_size=100)
    self.cmd_pub = rospy.Publisher("/sync" + rospy.get_param('~cmd_topic_name', 'cmd_vel'), Twist, queue_size=100)
    self.people_pub = rospy.Publisher("/sync" + rospy.get_param('~people_topic_name', 'cmd_vel'), People, queue_size=100)
    
    self.obs_pub = rospy.Publisher(rospy.get_param('~obs_topic_name', 'obs'), Observation, queue_size=100)
    self.act_pub = rospy.Publisher(rospy.get_param('~act_topic_name', 'act'), Action, queue_size=100)
    self.done_pub = rospy.Publisher(rospy.get_param('~done_topic_name', 'done'), IsTerminal, queue_size=100)

    ts = message_filters.ApproximateTimeSynchronizer([odom_sub_filter, cmd_sub_filter, people_sub_filter, status_sub_filter, clk_sub_filter], 100, 1.0, allow_headerless=True)
    ts.registerCallback(self.callback_sync)

    self.goal = [0, 0]
    self.status_list = []
  
  def callback_sync(self, data1, data2, data3, data4, data5):
    print("DataSynchronizer")
    print("|----Publishing synchronized data")
    self.odom_pub.publish(data1)
    self.cmd_pub.publish(data2)
    self.people_pub.publish(data3)

    #######################################################
    obs_msg = Observation()
    act_msg = Action()
    done_msg = IsTerminal()

    obs_msg.data.append(data1.pose.pose.position.x)
    obs_msg.data.append(data1.pose.pose.position.y)
    obs_msg.data.append(data1.pose.pose.orientation.z)
    obs_msg.data.append(data1.twist.twist.linear.x)
    obs_msg.data.append(data1.twist.twist.angular.z)

    for i in range(len(data3.people)):
      obs_msg.data.append(data3.people[i].position.x)
      obs_msg.data.append(data3.people[i].position.y)
    
    act_msg.data.append(data2.linear.x)
    act_msg.data.append(data2.angular.z)

    for i in range(len(data4.status_list)):
      self.status_list.append(data4.status_list[i].status)
    status_array = np.array(self.status_list)
    if len(status_array[status_array==1])>0:
      done_msg.done = False 
    else:
       done_msg.done = True
    # print(self.status_list) 

    self.obs_pub.publish(obs_msg)
    self.act_pub.publish(act_msg)
    self.done_pub.publish(done_msg)
    del self.status_list[:]
    #######################################################

  def callback_goal(self, data):
    self.goal = [data.pose.position.x, data.pose.position.y]

  def clk_publisher(self):
    r = rospy.Rate(self.clk_rate)
    while not rospy.is_shutdown():
      msg = Empty()
      self.clk_pub.publish(msg)

if __name__ == '__main__':
  rospy.init_node('data_syncronizer', anonymous=True)
  try:
    node = DataSynchronizer()
    node.clk_publisher()
    rospy.spin()
  except rospy.ROSInterruptException:
    rospy.loginfo("data_syncronizer node finished.")